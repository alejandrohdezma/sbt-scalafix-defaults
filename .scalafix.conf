rules = [
  Disable
  DisableSyntax
  LeakingImplicitClassVal
  MissingFinal
  NoAutoTupling
  NoInfer
  NoValInForComprehension
  OrganizeImports
  ProcedureSyntax
]

OrganizeImports {
  expandRelative = true
  removeUnused = false
  groups = [
    "re:java?\\.",
    "scala.",
    "cats.",
    "sbt.",
    "*",
    "com.sun."
  ]
}

Disable.symbols = [
  {
    regex = {
      includes = [
        "^\\Qscala.util.Either.RightProjection.get().\\E.*$",
        "^\\Qscala.util.Either.LeftProjection.get().\\E.*$"
      ]
    }
    id = "Either.get"
    message = "Either#get is disabled"
  }
  {
    regex = {
      includes = [
        "^\\Qscala.Option.get().\\E.*$",
        "^\\Qscala.Some.get().\\E.*$",
        "^\\Qscala.None.get().\\E.*$"
      ]
    }
    id = "Option.get"
    message = "Option#get is disabled"
  }
  {
    regex = {
      includes = [
        "^\\Qscala.util.Try.get().\\E.*$",
        "^\\Qscala.util.Success.get().\\E.*$",
        "^\\Qscala.util.Failure.get().\\E.*$"
      ]
    }
    id = "Try.get"
    message = "Try#get is disabled"
  }
  {
    regex = "^\\Qscala/collection/mutable\\E.*$"
    id = "scala.collections"
    message = "use Java collections instead, they have better performance"
  }
  {
    regex = "^\\Qscala/collection/parallel\\E.*$"
    id = "scala.parallel"
    message = "parallel collections are low performance and block the thread, prefer cats' Parallel"
  }
  {
    regex = "^\\Qscala/math/Big\\E.*$"
    id = "scala.math"
    message = "scala arbitrary precision numbers are broken: https://github.com/scala/bug/issues/9670"
  }
  {
    regex = {
      includes = [
        "^\\Qjava/io\\E.*$"
        "^\\Qscala/io/Source\\E.*$"
      ]
    }
    id = "blocking.io"
    message = "legacy blocking API, prefer java.nio"
  }
  {
    regex = "^\\Qjava/net/URL#\\E.*$"
    id = "java.net.URL"
    message = "URL talks to the network for equality, prefer URI"
  }
  {
    regex = "^.*\\Q#equals().\\E$"
    id = "equals"
    message = "prefer cats' Eq"
  }
  {
    regex = "^.*\\Q#hashCode().\\E$"
    id = "hashCode"
    message = "prefer cats' Hash"
  }
  {
    regex = "^.*\\Q#toString().\\E$"
    id = "toString"
    message = "prefer cats' Show"
  }
  {
    symbol = "scala/Enumeration"
    id = "Enumeration"
    message = "prefer a sealed abstract class"
  }
  {
    regex = "^\\Qscala/collection/IterableLike#head().\\E$"
    id = "head"
    message = "not a total function"
  }
]

Disable.ifSynthetic = [
  "java/io/Serializable"
  "scala/Any"
  "scala/Product"
  "scala/Option.option2Iterable"
  "scala/Predef.any2stringadd"
  {
    regex = {
      includes = [
        "^\\Qscala/collection/MapLike#apply().\\E$"
        "^\\Qscala/collection/LinearSeqOptimized#apply().\\E$"
      ]
    }
    message = "not a total function"
  }
]

DisableSyntax {
  noAsInstanceOf = true
  noContravariantTypes = true
  noCovariantTypes = true
  noDefaultArgs = true
  noFinalVal = true
  noFinalize = true
  noImplicitConversion = true
  noImplicitObject = true
  noIsInstanceOf = true
  noNulls = true
  noReturns = true
  noSemicolons = true
  noTabs = true
  noThrows = true
  noUniversalEquality = true
  noValInAbstract = true
  noValPatterns = true
  noVars = true
  noWhileLoops = true
  noXml = true
}

NoInfer.symbols = [
  "scala.AnyVal"
  "scala.Any"
  "java.io.Serializable"
  "scala.Product."
  "scala.Predef.any2stringadd"
  "scala.Option.option2Iterable"
]
