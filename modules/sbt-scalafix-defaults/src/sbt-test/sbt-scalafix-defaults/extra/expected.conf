# This file has been automatically generated and should
# not be edited nor added to source control systems.

# To edit the original configurations go to
# https://github.com/alejandrohdezma/sbt-scalafix-defaults/edit/main/.scalafix.conf

rules = [
  Disable
  DisableSyntax
  LeakingImplicitClassVal
  MissingFinal
  NoValInForComprehension
  OrganizeImports
  ProcedureSyntax
  RedundantSyntax
  RemoveUnused
]

OrganizeImports {
  expandRelative = true
  removeUnused = true
  groups = [
    "re:java?\\.",
    "scala.",
    "cats.",
    "sbt.",
    "*",
    "com.sun."
  ]
}

RemoveUnused.imports = false

Disable.symbols = [
  {
    regex = "^\\Qscala/collection/parallel\\E.*$"
    id = "scala.collection.parallel"
    message = """
      Parallel collections do not perform very well and block the thread, prefer cats' Parallel (https://typelevel.org/cats/typeclasses/parallel.html).
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.scala.collection.parallel"))
        - // scalafix:ok Disable.scala.collection.parallel
    """
  }
  {
    regex = "^.*\\Q#equals().\\E$"
    id = "equals"
    message = """
      Prefer using cats' Eq typeclass (https://typelevel.org/cats/typeclasses/eq.html).
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.equals"))
        - // scalafix:ok Disable.equals
    """
  }
  {
    regex = "^.*\\Q#hashCode().\\E$"
    id = "hashCode"
    message = """
      Prefer using cats' Hash typeclass (https://github.com/typelevel/cats/blob/master/kernel/src/main/scala/cats/kernel/Hash.scala).
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.hashCode"))
        - // scalafix:ok Disable.hashCode
    """
  }
  {
    regex = "^.*\\Q#toString().\\E$"
    id = "toString"
    message = """
      Prefer using cats' Show typeclass (https://typelevel.org/cats/typeclasses/show.html).
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.toString"))
        - // scalafix:ok Disable.toString
    """
  }
  {
    symbol = "scala/Enumeration"
    id = "Enumeration"
    message = """
      Prefer a sealed abstract class or Enumeratum (https://github.com/lloydmeta/enumeratum).
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.Enumeration"))
        - // scalafix:ok Disable.Enumeration
    """
  }
  {
    symbol = "scala/Predef/println"
    id = "println"
    message = """
      Try not to use `println`, use a logger instead.
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.println"))
        - // scalafix:ok Disable.println
    """
  }
]

Disable.ifSynthetic = [
  "scala/Option.option2Iterable"
  "scala/Predef.any2stringadd"
]

DisableSyntax {
  noAsInstanceOf = false
  noContravariantTypes = false
  noCovariantTypes = false
  noDefaultArgs = false
  noFinalVal = true
  noFinalize = true
  noImplicitConversion = true
  noImplicitObject = true
  noIsInstanceOf = false
  noNulls = true
  noReturns = true
  noSemicolons = true
  noTabs = true
  noThrows = true
  noUniversalEquality = true
  noValInAbstract = true
  noValPatterns = true
  noVars = true
  noWhileLoops = true
  noXml = true
}

OrganizeImports.groups += "com.alejandrohdezma."